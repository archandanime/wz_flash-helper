#!/bin/sh
#
#                          ,---.,--.               ,--.            ,--.            ,--.
# ,--.   ,--.,-----.      /  .-'|  | ,--,--. ,---. |  ,---.        |  ,---.  ,---. |  | ,---.  ,---. ,--.--.
# |  |.'.|  |`-.  /       |  `-,|  |' ,-.  |(  .-' |  .-.  |,-----.|  .-.  || .-. :|  || .-. || .-. :|  .--'
# |   .'.   | /  `-.,----.|  .-'|  |\ '-'  |.-'  `)|  | |  |'-----'|  | |  |\   --.|  || '-' '\   --.|  |
# '--'   '--'`-----''----'`--'  `--' `--`--'`----' `--' `--'       `--' `--' `----'`--'|  |-'  `----'`--'
#                                                                                      `--'


mkdir -p /dev /proc /sys /tmp
mkdir -p /mnt /var/lock
mkdir -p /sdcard

exec > /tmp/initramfs.log 2>&1 # Comment out this line to debug with serial connection
set -x

mount -t devtmpfs devtmpfs /dev
mount -t proc proc /proc
mount -t sysfs sysfs /sys

sleep 1

function init_play_audio() {
# Description: Play audio to let the user keep track of the progress, useful when they don't have a serial connection
	! lsmod | grep -q audio && return 0
	[[ ! "$enable_audio" == "yes" ]] && return 0

	local audio_file="$1"
	local numberic='^[0-9]+$'

	if [[ ! "$audio_volume" =~ $numberic ]] || [[ "$audio_volume" == "" ]] || [ "$audio_volume" -lt 0 ] || [ "$audio_volume" -gt 100 ]; then
		local audio_volume="50" # If the audio value is invalid, set it to 50
	fi
	audioplay $audio_file $audio_volume
}

function init_detect_hardware() {
# Description: Detect SoC and flash chip type
	chip_name=$(ipcinfo --chip-name)
	chip_family=$(ipcinfo --family)
	
	flash_type=$(ipcinfo --flash-type)
	blocksize=$(blockdev  --getbsz /dev/mtdblock0)
}

function init_backup_bootpart() {
# Description: Create a backup of the boot partition to rollback in case it gets corrupted and to detect the current profile by analyzing its strings
	case "$flash_type" in
		"nor")
			dd if=/dev/mtdblock0 of=/boot_backup.img status=none
			;;
		"nand")
			nanddump -q -f /boot_backup.img /dev/mtd0
			;;
	esac
	
	sha256sum /boot_backup.img > /boot_backup.img.sha256sum
	strings /boot_backup.img > /boot_backup.img.strings
}

function init_source() {
# Description: Import function and variable scripts
	source /functions_msg.sh
	source /functions_io.sh
	source /functions_misc.sh
	source /variables_msg.sh
	source /variables_prog_info.sh
}

function init_load_kernel_modules() {
# Description: Load kernel modules for the camera chip family
	# Some camera models need to load kernel modules with parameters
	for specialty_kmod_script in /kernel_module.d/model_specialty.d/*.sh ; do
		source $specialty_kmod_script
	done
	
	# Do not load kernel modules again if they have already been loaded by specialty scripts
	[[ "$kmod_specialty_flag" == "true" ]] && return 0

	for kernel_module in /kernel_module.d/*.ko ; do
		insmod $kernel_module
	done
}

function init_source_initialize_gpio() {
# Description: Initialize some GPIO pins to enable LEDs, also SD card if needed
	source /initialize_gpio.d/initialize_gpio.sh
}

function init_welcome() {
# Description: It is nice to let the user know that they are welcome!
	msg
	msg
	msg_color_bold lightmagenta "Welcome to initramfs init! ^_^" # Yep, a smiling emoji!
	msg
}

function init_drop_a_shell() {
# Description: Drop initramfs shell
	echo > /dev/console
	echo "Dropping a shell, the init script will be resumed after you exit this shell" > /dev/console
	echo "If you want to force a reboot, please run: reboot -f" > /dev/console
	echo > /dev/console

	exec 0< /dev/console
	exec 1> /dev/console
	exec 2> /dev/console
	
	/bin/sh -l

	exec > /tmp/initramfs.log 2>&1 # Redirect output back to the log file
	exec 0< /dev/null # Stop the user from typing on the serial terminal
	echo > /dev/console
	
	echo "Continuing init" > /dev/console
	sleep 1
}

function init_wait_interrupt() {
# Description: Allow the user to access the initramfs shell with a serial connection
	echo > /dev/console
	echo "Press any key to enter initramfs shell" > /dev/console
	
	exec 0< /dev/console # Allow the user to type on the serial terminal

	read -r -s -n 1 -t 3
	if [[ "$?" -eq 0 ]]; then
		init_drop_a_shell
	else
		echo "Action has timed out" > /dev/console
	fi
	
	exec 0< /dev/null
}

function init_source_detect_profile() {
# Description: Detect the current profile to read and write partitions correctly
	if [[ ! "$manual_current_profile" == "" ]]; then
		[ ! -d /profile.d/$manual_current_profile ] && { msg_color red "$manual_current_profile profile is not supported" ; return 1 ; }
		msg_color_nonewline lightbrown "Setting manual_current_profile: "
		msg_color cyan "$manual_current_profile"
		
		current_profile=$manual_current_profile
	else
		source /profile.d/detect_profile.sh || return 1
	fi
}

function init_source_variables_emulate() {
# Description: Emulate chip family, flash type, and current profile for testing
	source /variables_emulate.sh
}

function init_source_current_profile() {
# Description: Import current profile variables and query script
	source /profile.d/detect_chip_group.sh || return 1
	source /profile.d/$current_profile/cp_variables.sh
	source /profile.d/$current_profile/cp_queries.sh
}

function init_source_detect_model() {
# Description: Detect the current camera model by reading the factory-generated config file
	if [[ ! "$manual_model" == "" ]]; then
		msg_color_nonewline lightbrown "Setting manual_model: "
		msg_color cyan "$manual_model"
		
		model=$manual_model
	else
		source /profile.d/$current_profile/detect_model.sh
	fi
}

function init_mount_sdcard() {
# Description: Mount SD card, nothing more
	msg
	msg_nonewline "Mounting SD card... "
	if ! mountpoint -q /sdcard ; then
		mount -t vfat /dev/mmcblk0p1 /sdcard -o rw,umask=0000,dmask=0000 && msg_color green "ok" || { msg_color red "failed" ; return 1 ; }
	else
		msg_color green "already done"
	fi
}

function init_rename_prog_sdcard_kernel() {
# Description: Rename the program SD card kernel to avoid an infinite boot loop
	for kernelimg in $cp_sdcard_kernel_name $cp_sdcard_secondary_kernel_name; do
		if [ -f /sdcard/$kernelimg ]; then
			msg_nonewline "Renaming program SD card kernel "
			msg_color_nonewline cyan "$kernelimg "
			msg_nonewline "to "
			msg_color_nonewline cyan "$kernelimg.$prog_name"
			msg_nonewline "... "
			
			mv /sdcard/$kernelimg /sdcard/$kernelimg.$prog_name && { msg_color green "ok" ; return 0 ; } || msg_color red "failed"
		else
			msg_color_nonewline lightbrown "Program SD card kernel "
			msg_color_nonewline cyan "$kernelimg "
			msg_color lightbrown "for this profile is missing"
		fi
	done
	
	if [ -f /sdcard/$kernelimg.$prog_name ]; then
		msg_color_nonewline cyan "$kernelimg.$prog_name "
		msg "exists on SD card, it seems that you are running the init script manually"
	else
		msg_color_bold red "WARNING!!! The program SD card kernel cannot be renamed, this will result in a bootloop"
	fi
	sleep 3
	return 1
}

function init_import_prog_config_file() {
# Description: Source program config file to know and do what the user wants
	[ ! -d $prog_dir ] && { msg_color_bold red "$prog_dir does not exist. Creating it to store log files. Nothing will be done" ; mkdir -p $prog_dir ; return 1 ; }
	[ ! -f $prog_config_file ] && { msg_color_bold red "$prog_config_file file is missing. Nothing will be done" ; return 1 ; }

	# Fix issue that config file fails to be sourced if it contains MS-DOS newlines
	grep -q $'\r' $prog_config_file && dos2unix $prog_config_file
	source $prog_config_file || { msg_color_bold red "$prog_config_file file is invalid. Nothing will be done" ; return 1 ; }
}

function init_display_info() {
# Description: Display system info and current status
	msg
	msg_color_bold_nonewline white "Program version: " && msg_color cyan "$(cat /version)"
	
	msg_color_bold_nonewline white "Chip: "
	msg_nonewline "name: " && msg_color_nonewline cyan $chip_name
	msg_nonewline ", family: " && msg_color_nonewline cyan $chip_family
	msg_nonewline ", group: " && msg_color cyan $chip_group
	
	msg_color_bold_nonewline white "Flash: "
	msg_nonewline "type: " && msg_color_nonewline cyan $flash_type
	msg_nonewline ", block size: " && msg_color cyan $blocksize
	
	msg_color_bold_nonewline white "Model: " && msg_color cyan $model
	
	msg_color_bold_nonewline white "Current profile: " && msg_color cyan "$current_profile"
	msg
}

function init_exit() {
# Description: Copy log files to the SD card and reboot. The user can still interrupt and access the initramfs shell for debugging before the reboot
	msg
	msg_color_bold magenta "Initramfs init is finished!"

	echo > /dev/console
	cp /tmp/initramfs_serial.log $prog_log_file_serial
	cp /tmp/initramfs.log $prog_log_file
	msg_color green "Log files have been copied to SD card"

	sync
	umount /sdcard
	
	echo > /dev/console
	echo "The program is finished! You can enter initramfs shell again before the camera reboots" > /dev/console
	init_wait_interrupt

	#init_drop_a_shell # Comment out this line to debug with serial connection
	
	init_play_audio /sounds/rebooting_now.pcm
	umount -a -r
	reboot -f # Reboot immediately
	sleep 10 # Prevent init from continuing after init_exit finishes, but the camera has not rebooted immediately
}

function init_main() {
	init_source
	
	init_detect_hardware
	init_backup_bootpart
		
	init_source_initialize_gpio
	init_load_kernel_modules
	
	init_welcome
	init_wait_interrupt
	
	init_mount_sdcard || return 1
	init_import_prog_config_file || return 1
	
	init_source_detect_profile || return 1
	init_source_variables_emulate
	
	init_source_current_profile || return 1
	init_rename_prog_sdcard_kernel || return 1 # If any error happens before the SD card kernel is renamed, the camera will bootloop
	init_source_detect_model || return 1

	
	[ "$enforce_dry_run" == "yes" ] && dry_run="yes"
	init_display_info
	
	init_play_audio /sounds/wz_helper_finished_loading.pcm

	#---------- Backup operation ----------
	msg
	if [[ "$backup_partitions" == "yes" ]]; then
		msg_tickbox_yes
		msg "$msg_backup_partitions_yes"
		init_play_audio /sounds/processing_backup_operations.pcm
		
		if source /operation_backup.sh ; then
			msg_color_bold green "$msg_backup_partitions_succeed"
		else
			msg_color_bold red "$msg_backup_partitions_fail"
			init_play_audio /sounds/backup_operations_failed.pcm
			return 1
		fi
		msg
	else
		msg_tickbox_no
		msg "$msg_backup_partitions_no"
	fi

	#---------- Restore operation ----------
	msg
	if [[ "$restore_partitions" == "yes" ]]; then
		msg_tickbox_yes
		msg "$msg_restore_partitions_yes"
		init_play_audio /sounds/processing_restore_operations.pcm
		
		if source /operation_restore.sh ; then
			msg_color_bold green "$msg_restore_partitions_succeed"
		else
			msg_color_bold red "$msg_restore_partitions_fail"
			init_play_audio /sounds/restore_operations_failed.pcm
			return 1
		fi
		msg
	else
		msg_tickbox_no
		msg "$msg_restore_partitions_no"
	fi

	#---------- Switch profile operation ----------
	msg
	if [[ "$switch_profile" == "yes" ]]; then
		msg_tickbox_yes
		msg "$msg_switch_profile_yes"
		init_play_audio /sounds/processing_switch_profile_operations.pcm
		
		if source /operation_switch_profile.sh ; then
			msg_color_bold green "$msg_switch_profile_succeed"
		else
			msg_color_bold red "$msg_switch_profile_fail"
			init_play_audio /sounds/switch_profile_operations_failed.pcm
			return 1
		fi
		msg
	else
		msg_tickbox_no
		msg "$msg_switch_profile_no"
	fi

	#---------- New SD card kernel ----------
	msg
	if [[ "$copy_new_sdcard_kernel" == "yes" ]]; then
		msg_tickbox_yes
		msg "$msg_copy_new_sdcard_kernel_yes"
		source /action_copy_new_sdcard_kernel.sh || return 1
	else
		msg_tickbox_no
		msg "$msg_copy_new_sdcard_kernel_no"
	fi
	
	#---------- Custom scripts ----------
	msg
	if [[ "$enable_custom_scripts" == "yes" ]]; then
		msg_tickbox_yes
		msg "$msg_enable_custom_scripts_yes"
		init_play_audio /sounds/running_custom_scripts.pcm
		
		if source /action_execute_custom_scripts.sh ; then
			msg_color_bold green "$msg_enable_custom_scripts_succeed"
		else	
			msg_color_bold red "$msg_enable_custom_scripts_fail"
			init_play_audio /sounds/custom_scripts_failed.pcm
			return 1
		fi
		msg
	else
		msg_tickbox_no
		msg "$msg_enable_custom_scripts_no"
	fi
}

init_main && init_play_audio /sounds/all_operations_are_successful.pcm || init_play_audio /sounds/an_error_has_occurred.pcm
init_exit
