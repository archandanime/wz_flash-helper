#!/bin/sh
#
#                          ,---.,--.               ,--.            ,--.            ,--.                      
# ,--.   ,--.,-----.      /  .-'|  | ,--,--. ,---. |  ,---.        |  ,---.  ,---. |  | ,---.  ,---. ,--.--. 
# |  |.'.|  |`-.  /       |  `-,|  |' ,-.  |(  .-' |  .-.  |,-----.|  .-.  || .-. :|  || .-. || .-. :|  .--' 
# |   .'.   | /  `-.,----.|  .-'|  |\ '-'  |.-'  `)|  | |  |'-----'|  | |  |\   --.|  || '-' '\   --.|  |    
# '--'   '--'`-----''----'`--'  `--' `--`--'`----' `--' `--'       `--' `--' `----'`--'|  |-'  `----'`--'    
#                                                                                     `--'                  


mkdir -p /dev /proc /sys /tmp
mkdir -p /mnt /var/lock
mkdir -p /sdcard
	
exec > /tmp/initramfs.log 2>&1 # Comment out this line to debug with serial connection
set -x

mount -t devtmpfs devtmpfs /dev
mount -t proc proc /proc
mount -t sysfs sysfs /sys

sleep 1

function msg() {
# Description: Allow output messages to be both displayed on the serial terminal and get written to the log files
	local message="$1"

	echo "$message" # Print to log file
	echo "$message" > /dev/console # Print on serial terminal
	echo "$message" >> /tmp/initramfs_serial.log # Print to an extra log file, it is exactly the same as on serial terminal
}

function msg_dry_run() {
# Description: Print out commands instead of executing them when dry run is enabled
	local cmd="$1"

	echo " + (dry run) $cmd"
	echo " + (dry run) $cmd" > /dev/console
	echo " + (dry run) $cmd" >> /tmp/initramfs_serial.log
}

function msg_nonewline() {
# Description: Same as msg but without newline
	local message="$1"

	echo -n "$message"
	echo -n "$message" > /dev/console
	echo -n "$message" >> /tmp/initramfs_serial.log
}

function play_audio() {
# Description: Play audio to let the user keep track of the progress, useful when they don't have serial connection
	[[ ! "$enable_audio" == "yes" ]] && return 0

	audio_title="$1"
	case $audio_title in
		"initializing")
			local audio_file="/audio.d/initializing_oprerations.pcm"
			;;
		"processing")
			local audio_file="/audio.d/processing_operations.pcm"
			;;
		"successful")
			local audio_file="/audio.d/operations_successful.pcm"
			;;
		"failed")
			local audio_file="/audio.d/operations_failed.pcm"
			;;
		"rebooting")
			local audio_file="/audio.d/rebooting_now.pcm"
			;;
	esac
	
	local numberic='^[0-9]+$'
	if [[ ! "$audio_volume" =~ $numberic ]] || [[ "$audio_volume" == "" ]] || [ "$audio_volume" -lt 0 ] || [ "$audio_volume" -gt 100 ]; then # Check for invalid audio value
		local audio_volume="50"
	fi
	audioplay $audio_file $audio_volume
}

function detect_hardware() {
# Description: Detect SoC and flash chip type
	chip_name=$(ipcinfo --chip-name)
	chip_family=$(ipcinfo --family)
	flash_type=$(ipcinfo --flash-type)
}

function import_init_msg() {
# Description: Place long init messages somewhere else to keep this script clean
	source /init_variables_msg.sh
}

function import_functions_io() {
# Description: Import the "io" script which contains functions to read/write partitions
	source /functions_io.sh
}

function load_kernel_modules() {
# Description: Load kernel modules for camera chip family
	if ls /kernel_module.d/model_speciality.d/*.sh ; then # Some camera models need to load kernel modules with parameters
		for speciality_kmod_script in /kernel_module.d/model_speciality.d/*.sh ; do
			source $speciality_kmod_script
		done
	fi
	
	[[ "$kmod_speciality_flag" == "true" ]] && return 0 # Do not load kernel modules again if they has already been loaded by speciality scripts
	if ls /kernel_module.d/$chip_family/*.ko ; then
		for kernel_module in /kernel_module.d/$chip_family/*.ko ; do
			insmod $kernel_module
		done
	fi
}

function initialize_gpio() {
# Description: Initialize some GPIO pins to enable LEDs, maybe SD card if needed
	source /initialize_gpio.d/$chip_family.sh
}

function welcome() {
# Description: It is nice to let the user know that they are welcome!
	msg
	msg
	msg "Welcome to initramfs init! ^_^" # Yep, a smiling emoji!
	msg
}

function wait_init_interrupt() {
# Description: Allow the user to access initramfs shell with serial connection
	echo > /dev/console
	echo "Press any key to interrupt init" > /dev/console
	
	exec 0< /dev/console # Allow the user to type on serial terminal
	read -r -s -n 1 -t 3
	if [[ "$?" -eq 0 ]]; then
		echo "Dropping a shell" > /dev/console
		echo "You can run resize command to make terminal output match terminal size" > /dev/console
		exec 1> /dev/console
		exec 2> /dev/console
		cd / && exec /bin/sh
	fi
	echo "Action has timed out" > /dev/console
	echo > /dev/console
	exec 0< /dev/null # Stop the user from typing on serial terminal
}

function backup_bootpart() {
# Description: Create backup for boot partition to rollback in case it gets corrupted, and to detect current profile by analyzing its strings
	dd if=/dev/mtdblock0 of=/bootpart_backup.img status=none
	strings /bootpart_backup.img > /bootpart_backup.img.strings
}

function detect_current_profile() {
# Description: Detect current profile to read/write partitions correctly
	source /profile.d/$chip_family/detect_profile.sh || return 1
}

function import_prog_info() {
# Description: Import program variables
	source /init_variables_prog_info.sh
}

function emulate() {
# Description: Emulate chip family, flash type and current profile for testing
	source /init_emulate.sh
}

function import_current_profile() {
# Description: Import current profile variables and querry script
	source /profile.d/detect_chip_group.sh || return 1
	source /profile.d/$chip_family/$current_profile/current_profile_variables.sh
	source /profile.d/$chip_family/$current_profile/current_profile_queries.sh
}

function mount_sdcard() {
# Description: Mount SD card, nothing more
	msg
	msg_nonewline "Mounting SD card... "
	mount -t vfat /dev/mmcblk0p1 /sdcard -o rw,umask=0000,dmask=0000 && msg "succeeded" || msg "failed"
}

function rename_prog_sdcard_kernel() {
# Description: Rename program SD card kernel to avoid infinite boot loop
	if [ -f /sdcard/$current_profile_sdcard_kernel_name ]; then
		msg_nonewline "Renaming program SD card kernel: $current_profile_sdcard_kernel_name to $current_profile_sdcard_kernel_name.$prog_name... "
		mv /sdcard/$current_profile_sdcard_kernel_name /sdcard/$current_profile_sdcard_kernel_name.$prog_name && { msg "succeeded" ; return 0 ; } || msg "failed"
	else
		msg "Program SD card kernel $current_profile_sdcard_kernel_name for this profile is missing"
	fi

	# OpenIPC uboot for Ingenic can load SD card kernel with two filenames, the second SD card kernel will be renamed if found to prevent bootloop
	if [[ ! "$current_profile_sdcard_secondary_kernel_name" == "" ]] && [ -f /sdcard/$current_profile_sdcard_secondary_kernel_name ]; then
		msg_nonewline "Renaming program secondary SD card kernel: $current_profile_sdcard_secondary_kernel_name to $current_profile_sdcard_secondary_kernel_name.$prog_name... "
		mv /sdcard/$current_profile_sdcard_secondary_kernel_name /sdcard/$current_profile_sdcard_secondary_kernel_name.$prog_name && { msg "succeeded" ; return 0 ; } || msg "failed"
	else
		msg "Program SD card secondary kernel $current_profile_sdcard_secondary_kernel_name for this profile is missing"
	fi
	return 1
}

function import_prog_config_file() {
# Description: Source program config file to know and do what the user wants
	[ ! -d $prog_dir ] && { msg "$prog_dir does not exist. Creating it to store log files. Nothing will be done" ; mkdir -p $prog_dir ; return 1 ; }
	[ ! -f $prog_config_file ] && { msg "$prog_config_file file is missing. Nothing will be done" ; return 1 ; }

	# Fix issue that config file fails to be sourced if it contains MS-DOS newlines
	dos2unix $prog_config_file && source $prog_config_file || { msg "$prog_config_file file is invalid. Nothing will be done" ; return 1 ; }
}

function detect_camera_model() {
# Description: Detect current camera model by reading the factory generated config file
	source /profile.d/$chip_family/$current_profile/detect_model.sh
}

function display_info() {
# Description: Display system info and current status
	msg
	msg "Program version: $(cat /prog_ver.txt)"
	msg "Hardware: chip name: $chip_name, chip family: $chip_family, flash type: $flash_type, model: $model"
	msg "Current profile: $current_profile"
	msg
}

function exit_init() {
# Description: Copy log files to SD card and reboot, the user can still interrupt and access initramfs shell for debugging before the reboot
	msg
	msg "---------- Exit init ----------"
	msg

	msg "Initramfs init is finished! Exiting now"

	cp /tmp/initramfs.log $prog_log_file
	cp /tmp/initramfs_serial.log $prog_log_file_serial

	sync
	umount /sdcard

	sleep 1
	echo "Everything is finished! You can enter initramfs shell again before the program exits" > /dev/console
	wait_init_interrupt
	
	umount -a -r
	play_audio "rebooting"
	reboot -f # Reboot immediately
	sleep 10 # Prevent init from continuing after exit_init finishes but the camera has not rebooted immediately
}

function main() {
	detect_hardware

	import_init_msg
	import_functions_io
	
	load_kernel_modules
	initialize_gpio
	
	welcome
	wait_init_interrupt

	backup_bootpart
	
	detect_current_profile || return 1
	emulate
	
	import_current_profile || return 1
	import_prog_info
	
	mount_sdcard || return 1
	rename_prog_sdcard_kernel || { msg "$rename_prog_sdcard_kernel_fail" ; sleep 3 ; }
	import_prog_config_file || return 1

	detect_camera_model || return 1
	display_info
	
	[[ "$dry_run" == "yes" ]] && msg "$dry_run_yes" || msg "$dry_run_no" && msg

	play_audio "initializing"

	#---------- Backup operation ----------
	msg
	if [[ "$backup_partitions" == "yes" ]]; then
		msg "$backup_partitions_yes"
		play_audio "processing"
		source /operation_backup.sh && msg "$backup_partitions_succeed" || { msg "$backup_partitions_fail" ; return 1 ; }
	else
		msg "$backup_partitions_no"
	fi

	#---------- Restore operation ----------
	msg
	if [[ "$restore_partitions" == "yes" ]]; then
		msg "$restore_partitions_yes"
		play_audio "processing"
		source /operation_restore.sh && msg "$restore_partitions_succeed" || { msg "$restore_partitions_fail" ; return 1 ; }
	else
		msg "$restore_partitions_no"
	fi

	#---------- Switch profile operation ----------
	msg
	if [[ "$switch_profile" == "yes" ]]; then
		msg "$switch_profile_yes"
		play_audio "processing"
		source /operation_switch_profile.sh && msg "$switch_profile_succeed" || { msg "$switch_profile_fail" ; return 1 ; }
	else
		msg "$switch_profile_no"
	fi

	#---------- Custom script ----------
	msg
	if [[ "$enable_custom_script" == "yes" ]]; then
		msg "$enable_custom_script_yes"
		source /action_execute_custom_script.sh && msg "$enable_custom_script_succeed" || { msg "$enable_custom_script_fail" ; return 1 ; }
	else
		msg "$enable_custom_script_no"
	fi

	#---------- New SD card kernel ----------
	msg
	if [[ "$copy_new_sdcard_kernel" == "yes" ]]; then
		msg "$copy_new_sdcard_kernel_no"
		source /action_copy_new_sdcard_kernel.sh && msg "$copy_new_sdcard_kernel_succeed" || { msg "$copy_new_sdcard_kernel_fail" ; return 1 ; }
	else
		msg "$copy_new_sdcard_kernel_no"
	fi
}


main && play_audio "successful" || play_audio "failed"
exit_init

