#!/bin/sh
#
# PART: Partition name
# START: Partition start address
# END: Partition end address
# SIZE: Partition size(in 1k block)
#
# Used partition names are the as mtdparts parameter on the kernel
#
#---------- T20 stock ----------
#PART     SIZE(dec)  START(dec)  START(hex)
#boot     256        0           0x0
#kernel   2048       256         0x40000
#root     3392       2304        0x240000
#driver   640        5696        0x590000
#appfs    4736       6336        0x630000
#backupk  2048       11072       0xad0000
#backupd  640        13120       0xcd0000
#backupa  2048       13760       0xd70000
#config   256        15808       0xf70000
#para     256        16064       0xfb0000
#
#---------- T31 stock ----------
#PART    SIZE(dec)  START(dec)  START(hex)
#boot    256        0           0x0
#kernel  1984       256         0x40000
#rootfs  3904       2240        0x230000
#app     3904       6144        0x600000
#kback   1984       10048       0x9d0000
#aback   3904       12032       0xbc0000
#cfg     384        15936       0xf90000
#para    64         16320       0xff0000
#
#---------- T20 and T31 OpenIPC ----------
#PART         SIZE(dec)  START(dec)  START(hex)
#boot         256        0           0x0
#env          64         256         0x40000
#kernel       3072       320         0x50000
#rootfs       10240      3392        0x350000
#rootfs-data  2752       13632       0xd50000
#

exec > /tmp/initramfs.log 2>&1


mount -t devtmpfs devtmpfs /dev
mount -t proc proc /proc
mount -t sysfs sysfs /sys

sleep 1


function msg() {
# Descritpion: Allow output messages to be both displayed serial terminal and written on log file
	message="$1"
	echo "$message"
	echo "$message" > /dev/console
}

function msg_nonewline() {
	message="$1"
	echo -n "$message"
	echo -n "$message" > /dev/console
}

function initialize_t20_gpio_sdcard() {
# Description: T20 cameras need this to get SD card detected
	echo 43 > /sys/class/gpio/export
	echo in > /sys/class/gpio/gpio43/direction
	sleep 3 # Required delay for SD card init on T20
}

function initialize_gpio_leds() {
# Description: Export LEDs GPIO pins if they don't exist
	if [ ! -d /sys/class/gpio/gpio38 ]; then
		echo 38 > /sys/class/gpio/export
		echo out > /sys/class/gpio/gpio38/direction
		echo 1 > /sys/class/gpio/gpio38/value
	fi

	if [ ! -d /sys/class/gpio/gpio39 ]; then
		echo 39 > /sys/class/gpio/export
		echo out > /sys/class/gpio/gpio39/direction
		echo 1 > /sys/class/gpio/gpio39/value
	fi
}

function get_t20_stock_partstartaddr() {
# Description: Return start address of a given partition name on T20 cameras stock firmware
# Syntax: get_t20_stock_partstartaddr <partname>
	case "$1" in
		"boot")
			echo -n "0" ;;
		"kernel")
			echo -n "256" ;;
		"root")
			echo -n "2304" ;;
		"driver")
			echo -n "5696" ;;
		"appfs")
			echo -n "6336" ;;
		"backupk")
			echo -n "11072" ;;
		"backupd")
			echo -n "13120" ;;
		"backupa")
			echo -n "13760" ;;
		"config")
			echo -n "15808" ;;
		"para")
			echo -n "16064" ;;
	esac
}

function get_t31_stock_partstartaddr() {
# Description: Return start address of a given partition name on T31 cameras stock firmware
# Syntax: get_t31_stock_partstartaddr <partname>
	case "$1" in
		"boot")
			echo -n "0" ;;
		"kernel")
			echo -n "256" ;;
		"rootfs")
			echo -n "2240" ;;
		"app")
			echo -n "6144" ;;
		"kback")
			echo -n "10048" ;;
		"aback")
			echo -n "12032" ;;
		"cfg")
			echo -n "15936" ;;
		"para")
			echo -n "16320" ;;
	esac
}

function get_openipc_partstartaddr() {
# Description: Return start address of a given partition name on OpenIPC firmware
# Syntax: get_openipc_partstartaddr <partname>
	case "$1" in
		"boot")
			echo -n "0" ;;
		"env")
			echo -n "256" ;;
		"kernel")
			echo -n "320" ;;
		"rootfs")
			echo -n "3392" ;;
		"rootfs-data")
			echo -n "13632" ;;
	esac
}

function get_t20_stock_partsize() {
# Description: Return partition size of a given partition name on T20 cameras stock firmware
# Syntax: get_t20_stock_partsize <partname>
	case "$1" in
		"boot")
			echo -n "256" ;;
		"kernel")
			echo -n "2048" ;;
		"root")
			echo -n "3392" ;;
		"driver")
			echo -n "640" ;;
		"appfs")
			echo -n "4736" ;;
		"backupk")
			echo -n "2048" ;;
		"backupd")
			echo -n "640" ;;
		"backupa")
			echo -n "2048" ;;
		"config")
			echo -n "256" ;;
		"para")
			echo -n "256" ;;
	esac
}

function get_t31_stock_partsize() {
# Description: Return partition size of a given partition name on T31 cameras stock firmware
# Syntax: get_t31_stock_partsize <partname>
	case "$1" in
		"boot")
			echo -n "256" ;;
		"kernel")
			echo -n "1984" ;;
		"rootfs")
			echo -n "3904" ;;
		"app")
			echo -n "3904" ;;
		"kback")
			echo -n "1984" ;;
		"aback")
			echo -n "3904" ;;
		"cfg")
			echo -n "384" ;;
		"para")
			echo -n "64" ;;
	esac
}

function get_openipc_partsize() {
# Description: Return partition size of a given partition name on OpenIPC firmware
# Syntax: get_openipc_partsize <partname>
	case "$1" in
		"boot")
			echo -n "256" ;;
		"env")
			echo -n "64" ;;
		"kernel")
			echo -n "3072" ;;
		"rootfs")
			echo -n "10240" ;;
		"rootfs-data")
			echo -n "2752" ;;
	esac
}

function get_t20_stock_partimgfile() {
# Description: Return filename for the partition used for backup/restore of a given partition name on T20 stock firmware
# Syntax: get_t20_stock_partimgfile <partname>
	case "$1" in
		"boot")
			echo -n "t20_stock_boot.bin" ;;
		"kernel")
			echo -n "t20_stock_kernel.bin" ;;
		"root")
			echo -n "t20_stock_root.bin" ;;
		"driver")
			echo -n "t20_stock_driver.bin" ;;
		"appfs")
			echo -n "t20_stock_appfs.bin" ;;
		"backupk")
			echo -n "t20_stock_backupk.bin" ;;
		"backupd")
			echo -n "t20_stock_backupd.bin" ;;
		"backupa")
			echo -n "t20_stock_backupa.bin" ;;
		"config")
			echo -n "t20_stock_config.bin" ;;
		"para")
			echo -n "t20_stock_para.bin" ;;
	esac
}


function get_t31_stock_partimgfile() {
# Description: Return filename for the partition used for backup/restore of a given partition name on T31 stock firmware
# Syntax: get_t31_stock_partimgfile <partname>
	case "$1" in
		"kernel")
			echo -n "t31_stock_kernel.bin" ;;
		"rootfs")
			echo -n "t31_stock_rootfs.bin" ;;
		"app")
			echo -n "t31_stock_app.bin" ;;
		"kback")
			echo -n "t31_stock_kback.bin" ;;
		"aback")
			echo -n "t31_stock_aback.bin" ;;
		"cfg")
			echo -n "t31_stock_cfg.bin" ;;
		"para")
			echo -n "t31_stock_para.bin" ;;
	esac
}

function get_openipc_partimgfile() {
# Description: Return filename for the partition used for backup/restore of a given partition name on OpenIPC firmware
# Syntax: get_openipc_partimgfile <partname>
	case "$1" in
		"boot")
			echo -n "openipc_boot.bin" ;;
		"env")
			echo -n "openipc_env.bin" ;;
		"kernel")
			echo -n "openipc_kernel.bin" ;;
		"rootfs")
			echo -n "openipc_rootfs.bin" ;;
		"rootfs-data")
			echo -n "openipc_rootfs-data.bin" ;;
	esac
}

function get_t20_stock_restore_opt_value() {
# Description: Return user option to decide if a given partition is restored or not on T20 stock firmware
# Syntax: get_t20_stock_restore_opt_value <partname>
	case "$1" in
		"boot")
			echo -n "$t20_restore_boot" ;;
		"kernel")
			echo -n "$t20_restore_kernel" ;;
		"root")
			echo -n "$t20_restore_root" ;;
		"driver")
			echo -n "$t20_restore_driver" ;;
		"appfs")
			echo -n "$t20_restore_appfs" ;;
		"backupk")
			echo -n "$t20_restore_backupk" ;;
		"backupd")
			echo -n "$t20_restore_backupd" ;;
		"backupa")
			echo -n "$t20_restore_backupa" ;;
		"config")
			echo -n "$t20_restore_config" ;;
		"para")
			echo -n "$t20_restore_para" ;;
	esac
}

function get_t31_stock_restore_opt_value() {
# Description: Return user option to decide if a given partition is restored or not on T31 stock firmware
# Syntax: get_t31_stock_restore_opt_value <partname>
	case "$1" in
		"kernel")
			echo -n "$t31_restore_kernel" ;;
		"rootfs")
			echo -n "$t31_restore_rootfs" ;;
		"app")
			echo -n "$t31_restore_app" ;;
		"kback")
			echo -n "$t31_restore_kback" ;;
		"aback")
			echo -n "$t31_restore_aback" ;;
		"cfg")
			echo -n "$t31_restore_cfg" ;;
		"para")
			echo -n "$t31_restore_para" ;;
	esac
}

function get_openipc_restore_opt_value() {
# Description: Return user option to decide if a given partition is restored or not on OpenIPC firmware
# Syntax: get_openipc_restore_opt_value <partname>
	case "$1" in
		"boot")
			echo -n "$openipc_restore_boot" ;;
		"env")
			echo -n "$openipc_restore_env" ;;
		"kernel")
			echo -n "$openipc_restore_kernel" ;;
		"rootfs")
			echo -n "$openipc_restore_rootfs" ;;
		"rootfs-data")
			echo -n "$openipc_restore_rootfs_data" ;;
	esac
}

function restore_file_to_partition() {
# Description: Write from <input file> to <concatenated mtd device> at <start address in decimal>
# Syntax: restore_file_to_partition <partition name> <input file> <start address in decimal>
	local partname="$1"
	local in_partimg="$2"
	local start_addr="$3"

	[ ! -f $in_partimg ] && { msg " + $in_partimg is missing" ; return 1 ; }
	msg " + Restoring $partname partition"
	if [[ "$dry_run" == "yes" ]]; then
		msg_nonewline " + Checking md5 of $in_partimg: "
		md5sum -c $in_partimg.md5sum && msg " + (this command is not run) dd if=$in_partimg of=$concat_mtddev skip=$start_addr"
	else
		msg_nonewline " + Checking md5 of $restore_file: "
		md5sum -c $in_partimg.md5sum && dd if=$in_partimg of=$concat_mtddev skip=$start_addr || { msg " + md5 checksum for $in_partimg failed" ; return 1 ; }
	fi
}

function backup_partition_to_file() {
# Description: Backup partition with <start address> and <1k size in decimal> from <concatenated mtd device> to <output file>
# Syntax: backup_partition_to_file <partition name> <start address in decimal> <1k size in decimal> <output file>
	local partname="$1"
	local start_addr="$2"
	local read_size="$3"
	local out_partimg="$4"
	
	[ -f $out_partimg ] && { msg " + $out_partimg exists" ; return 1 ; }

	msg " + Making backup for $partname partition"	
	if [[ "$dry_run" == "yes" ]]; then
		msg " + (this command is not run) dd if=$concat_mtddev of=$out_partimg bs=1k skip=$start_addr count=$read_size"
		msg " + (this command is not run) md5sum $out_partimg > $out_partimg.md5sum"
	else
		dd if=$concat_mtddev of=$out_partimg bs=1k skip=$start_addr count=$read_size || { msg " + Failed to back up $partname partition" ; return 1 ; }
		md5sum $out_partimg > $out_partimg.md5sum
	fi

}

function backup_full_flash() {
	case "$current_fw_type" in
		"stock")
			dd if=$concat_mtddev of=$stock_backup_dir_path/$stock_full_flash_filename ;;
		"openipc")
			dd if=$concat_mtddev of=$openipc_backup_dir_path/$openipc_full_flash_filename ;;
	esac
}

function backup_t20_stock_parts() {
# Description: Create partition images of all stock partitions on T20 flash chip
	[ ! -d $backup_dir_path/stock ] && mkdir $backup_dir_path/stock
	
	for partname in $t20_stock_partname_list; do
		local start_addr=$(get_t20_stock_partstartaddr $partname)
		local out_file=$(get_t20_stock_partimgfile $partname)
		local out_partimg=$stock_backup_dir_path/$out_file
		msg "- Backup: $partname to file $out_file ---"
		backup_partition_to_file $partname $start_addr $read_size $out_partimg || { msg "Backup $partname partition to $out_partimg failed" ; exit_init ; }
	done
}

function backup_t20_stock_config() {
# Description: Create tar.gz archive for config partition on T20 flash chip
	msg "Executing backup_t20_stock_config"
	mkdir /t20_stock_config
	mount -t jffs2 $t20_config_mtddev /t20_stock_config
	tar -cvf $stock_backup_dir_path/config.tar.gz /t20_stock_config
	sync
	umount /t20_stock_config
}

function backup_t20_stock_para() {
# Description: Create tar.gz archive for para partition on T20 flash chip
	msg "Executing backup_t20_stock_para"
	mkdir /t20_stock_para
	mount -t jffs2 $t20_para_mtddev /t20_stock_para
	tar -cvf $stock_backup_dir_path/para.tar.gz /t20_stock_para
	sync
	umount /t20_stock_para
}

function backup_t31_stock_parts() {
# Description: Create partition images of all stock partitions on T31 flash chip
	msg "Executing backup_t31_stock_parts"
	[ ! -d $backup_dir_path/stock ] && mkdir $backup_dir_path/stock
	
	for partname in $t31_stock_partname_list; do
		local start_addr=$(get_t31_stock_partstartaddr $partname)
		local out_file=$(get_t31_stock_partimgfile $partname)
		local out_partimg=$stock_backup_dir_path/$out_file
		msg "- Backup: $partname to file $out_file ---"
		backup_partition_to_file $partname $start_addr $read_size $out_partimg || { msg "Backup $partname partition to $out_partimg failed" ; exit_init ; }
	done
}

function backup_t31_stock_config() {
# Description: Create tar.gz archive for config partition on T31 flash chip
	msg "Executing backup_t20_stock_config"
	mkdir /t31_stock_config
	mount -t jffs2 $t31_config_mtddev /t31_stock_config
	tar -cvf $stock_backup_dir_path/configs.tar.gz /t31_stock_config
	sync
	umount /t31_stock_config
}

function backup_openipc_parts() {
# Description: Create partition images of all OpenIPC partitions on T31 flash chip
	msg "Executing backup_openipc_parts"
	[ ! -d $backup_dir_path/openipc ] && mkdir $backup_dir_path/openipc
	
	for partname in $openipc_partname_list; do
		local start_addr=$(get_openipc_partstartaddr $partname)
		local out_file=$(get_openipc_partimgfile $partname)
		local out_partimg=$openipc_backup_dir_path/$out_file
		msg "- Backup: $partname to file $out_file ---"
		backup_partition_to_file $partname $start_addr $read_size $out_partimg || { msg "Backup $partname partition to $out_partimg failed" ; exit_init ; }
	done
}

function restore_t20_stock_parts() {
# Description: Restore stock partitions from partition images on T20 flash chip
	msg "Executing backup_t31_stock_parts"
	for partname in $t20_stock_partname_list; do
		local in_file=$(get_t20_stock_partimgfile $partname)
		local start_addr=$(get_t20_stock_partstartaddr $partname)
		local restore_opt_value=$(get_t20_stock_restore_opt_value $partname)

		msg "- Restore: $partname from file $in_file"
		if [[ "$restore_opt_value" == "yes" ]]; then

			msg " + restore_$partname value is Yes"
			restore_file_to_partition $partname $filename $start_addr || { msg "Restore $in_file to $partname partition failed" ; exit_init ; }
		else
			msg " + restore_$partname value is No"
		fi
	done
}

function restore_t31_stock_parts() {
# Description: Restore stock partitions from partition images on T31 flash chip
	msg "Executing backup_t31_stock_parts"
	for partname in $t31_stock_partname_list; do
		local in_file=$(get_t31_stock_partimgfile $partname)
		local start_addr=$(get_t31_stock_partstartaddr $partname)
		local restore_opt_value=$(get_t31_stock_restore_opt_value $partname)

		msg "- Restore: $partname from file $in_file"
		if [[ "$restore_opt_value" == "yes" ]]; then

			msg " + restore_$partname value is Yes"
			restore_file_to_partition $partname $filename $start_addr || { msg "Restore $in_file to $partname partition failed" ; exit_init ; }
		else
			msg " + restore_$partname value is No"
		fi
	done
}

function restore_openipc_parts() {
# Description: Restore OpenIPC partitions from partition images on T20 flash chip
	msg "Executing restore_openipc_parts"
	for partname in $openipc_partname_list; do
		local in_file=$(get_openipc_partimgfile $partname)
		local start_addr=$(get_openipc_partstartaddr $partname)
		local restore_opt_value=$(get_openipc_restore_opt_value $partname)

		msg "- Restore: $partname from file $in_file"
		if [[ "$restore_opt_value" == "yes" ]]; then

			msg " + restore_$partname value is Yes"
			restore_file_to_partition $partname $filename $start_addr || { msg "Restore $in_file to $partname partition failed" ; exit_init ; }
		else
			msg " + restore_$partname value is No"
		fi
	done
}

function exit_init() {
# Description: Rename SD card boot image to avoid infinite boot loop and move initramfs log to SD card
	case "$current_fw_type" in
		"stock")
			msg "Renaming /sdcard/factory_t31_ZMC6tiIDQN to /sdcard/factory_t31_ZMC6tiIDQN.$installer_name"
			mv /sdcard/factory_t31_ZMC6tiIDQN /sdcard/factory_t31_ZMC6tiIDQN.$installer_name
			;;
		"openipc")
			msg "Renaming /sdcard/factory_0P3N1PC_kernel to /sdcard/factory_0P3N1PC_kernel.$installer_name"
			mv /sdcard/factory_0P3N1PC_kernel /sdcard/factory_0P3N1PC_kernel.$installer_name
			;;
	esac

	case "$current_fw_type" in
		"stock")
			msg "Renaming /sdcard/$continue_boot_img_filename to /sdcard/factory_t31_ZMC6tiIDQN"
			mv /sdcard/$continue_boot_img_filename /sdcard/factory_t31_ZMC6tiIDQN
			;;
		"openipc")
			msg "Renaming /sdcard/$continue_boot_img_filename to /sdcard/factory_0P3N1PC_kernel"
			mv /sdcard/$continue_boot_img_filename /sdcard/factory_0P3N1PC_kernel
			;;
	esac

	msg
	msg "Initramfs init is finished! Exiting now"
	[ -f /tmp/initramfs.log ] && cp /tmp/initramfs.log $log_file
	[ -f /tmp/initramfs_missing-config-file.log ] && cp /tmp/initramfs_missing-config-file.log $log_file_fallback
	sync
	umount /sdcard
	sleep 1
	reboot
}

function set_vaviables() {
	installer_name="wz_flash-helper"

	stock_backup_dir_path="/sdcard/Wyze_factory_backup/"
	openipc_backup_dir_path="/sdcard/wz_flash-helper/backup/openipc"

	stock_full_flash_filename="stock_fullflash"
	openipc_full_flash_filename="openipc_fullflash"
	
	stock_restore_dir_path="/sdcard/wz_flash-helper/restore/stock"
	openipc_restore_dir_path="/sdcard/wz_flash-helper/restore/openipc"

	config_file="/sdcard/wz_flash-helper/wz_flash-helper.conf"
	log_file="/sdcard/wz_flash-helper/wz_flash-helper.log"
	log_file_fallback="/sdcard/wz_flash-helper_no-config-error.log"

	t20_stock_partname_list="boot kernel root driver appfs backupk backupd backupa config para"
	t31_stock_partname_list="boot kernel rootfs app kback aback config para"
	openipc_partname_list="boot env kernel rootfs rootfs-data"

	boot_mtddev="/dev/mtd0"
	t20_config_mtddev="/dev/mtd1"
	t20_para_mtddev="/dev/mtd2"
	t31_config_mtddev="/dev/mtd3"
	concat_mtddev="/dev/mtd4"
	
	boot_mtdblockdev="/dev/mtdblock0"
}

function detect_chip_and_fw() {
# Description: Detect chip family and current firmware to do later operations correctly
	chip_name=`ipcinfo-mips32 --chip-name`
	chip_family=`ipcinfo-mips32 --family`
	msg "Detected chip name: $chip_name, chip family: $chip_family"

	dd if=$boot_mtdblockdev of=/tmp/uboot_partimg
	strings /tmp/uboot_partimg > /tmp/uboot_partimg_strings

	if grep -q "demo.bin" /tmp/uboot_partimg_strings; then #  Cam v2 & Cam Pan
	   	msg "Camera is currently on Cam Pan v2 or Cam Pan stock firmware"
	   	current_fw_type="stock"
	elif grep -q "demo_wcv3.bin" /tmp/uboot_partimg_strings; then # Cam v3
	   	msg "Camera is currently on Cam v3 stock firmware"
	   	current_fw_type="stock"
	elif grep -q "recovery_wcpv2.bin" /tmp/uboot_partimg_strings ; then # Cam Pan v2
	   	msg "Camera is currently on Cam Pan v2 stock firmware"
	   	current_fw_type="stock"
	elif grep -q "factory_0P3N1PC_kernel" /tmp/uboot_partimg_strings ; then
	   	msg "Camera is currently on OpenIPC firmware"
		current_fw_type="openipc"
	else
		{ msg "Can not detect current firmware type" ; exit_init ; }
	fi

	rm /tmp/uboot_partimg
}

initialize_gpio() {
# Description: Initialize GPIO for LEDs and SD card on T20 cameras
	[[ "chip_family" == "T20" ]] && initialize_t20_gpio_sdcard
	initialize_gpio_leds
}

welcome_msg() {
	msg "Welcome to $installer_name!"
}

wait_init_interrupt() {
	msg
	msg
	echo "Press any key to interrupt init" > /dev/console
	msg
	msg
	exec 0< /dev/console
	read -r -s -n 1 -t 3
	if [[ "$?" -eq 0 ]]; then
		echo "Dropping a shell"
		exec 1> /dev/console
		exec 2> /dev/console
		exec /bin/sh
	fi
	echo "Action has timed out" > /dev/console
}

import_config_vars() {
	[ ! -f $config_file ] && { msg "$config_file file is missing" ; mv /tmp/initramfs.log /tmp/initramfs_missing-config-file.log ; exit_init ; }

	dos2unix $config_file # Fix MS-DOS newline import issue
	source $config_file || { msg "$config_file file is invalid" ; exit_init ; }
	
	[[ ! "$restore_fw_type" == "stock" ]] || [[ ! "$restore_fw_type" == "openipc" ]] && { msg "Invalid restore firmware type" ; exit_init ; }
}

function do_backup_operations() {
# Description: Create partition images of flash partition. If current firmware stock, create extra backup for device-specific information on config and para partitions
	if [[ "${backup_partitions}" == "yes" ]]; then
		msg "backup_partitions value is Yes"
		/blink_blue_led.sh &
		blue_led_pid="$!"
		msg
		msg "---------- Begin of backup operations ----------"
		backup_full_flash
		if [[ "$current_fw_type" == "stock" ]] && [[ "$chip_family" = "T20" ]]; then
			msg "Backing up stock partitions and config for T20 camera"
			backup_t20_stock_parts
			backup_t20_stock_config
			backup_t20_stock_para
		elif [[ "$current_fw_type" == "stock" ]] && [[ "$chip_family" = "T31" ]]; then
			msg "Backing up stock partitions and config for T31 camera"
			backup_t31_stock_parts
			backup_t31_stock_config
		elif [[ "$current_fw_type" == "openipc" ]]; then
			msg "Backing up OpenIPC partitions"
			backup_openipc_parts
		fi
		kill $red_led_pid
	else
		msg "backup_partitions value is No"
	fi
}

function do_restore_operations() {
# Description: Restore flash partitions using partion images
	if [[ "$restore_partitions" == "yes" ]]; then
		msg "restore_partitions value is Yes"

		[ ! -d $restore_dir_path ] && { msg "$restore_dir_path directory is missing" ; exit_init ; }

		cp -r $restore_dir_path /$restore_dir_name # Copy restore directory to RAM in case of defected SD card
		cd /$restore_dir_name

		/blink_red_led.sh &
		red_led_pid="$!"
		msg
		msg "---------- Begin of restore operations ----------"
		if [[ "$restore_fw_type" == "stock" ]] && [[ "$chip_family" = "T20" ]]; then
			msg "Restoring stock partitions for T20 camera"
			restore_t20_stock_parts
		elif [[ "$restore_fw_type" == "stock" ]] && [[ "$chip_family" = "T31" ]]; then
			msg "Restoring stock partitions for T31 camera"
			restore_t31_stock_parts
		elif [[ "$restore_fw_type" == "openipc" ]]; then
			msg "Restoring OpenIPC partitions for T20 camera"
			restore_openipc_parts
		fi
		kill $red_led_pid
	else
		msg "restore_partitions value is No"
	fi
}

function execute_custom_script() {
# Description: Execute user custom script if it exists
	msg "custom_script value is set to \"$custom_script\""
	if [ -f /sdcard/$custom_script ]; then
		msg "Custom script is found"
		if [[ "$dry_run" == "yes" ]]; then
			msg "Custom script does not run when dry mode is active"
		else
			msg "Executing custom script"
			/sdcard/$custom_script || { msg "Custom script did not run properly" ; exit_init ; }
		fi
	else
		msg "Custom script is missing"
	fi
}

function main() {
	set_variables
	detect_chip_and_fw
	welcome_msg
	
	wait_init_interrupt
	import_config_vars
	do_backup_operations
	# do_restore_operations
	execute_custom_script

	exit_init
}


main
